// ===Prices:===
// =Global:=
// scales prices linearly
priceMult = 1.0
// pushes prices closer together or farther apart
priceSpread = 1.0

// the highest a ware's price may increase based on stock quantity
// 2.0 == 2x price base after stock falls below quanDeficient
priceCeiling = 2.0
// the lowest a ware's price may decrease based on stock quantity
// 0.0 == free after stock surpasses quanExcessive
priceFloor = 0.0

// =Targeted Multipliers:=
// processed wares' prices are adjusted by this multiplier
// ex: charcoal's price == wood's price * priceProcessed
priceProcessed = 1.5
// crafted wares' prices are adjusted by this multiplier
// ex: piston's price == sum of piston's components' prices * priceCrafted
priceCrafted = 1.2

// multiplies the cost of purchasing a ware, but keeps selling the same
// 1.2 == 20% higher price when buying than selling
priceBuyUpchargeMult = 1.0

// if true, out-of-stock processed/crafted wares may be purchased
// if their components have enough available stock on the market
buyingOutOfStockWaresAllowed = true

// how much to charge for purchasing out-of-stock processed/crafted wares
// this charge is in addition to processed/crafted price multipliers
// 1.10 == +10% out-of-stock price
buyingOutOfStockWaresPriceMult = 1.10

// =Linked Prices:=
// if true, current prices of components used to create a ware
// affect the current price of the created ware,
// even if the ware cannot be reverted into its components
// ex: if wood is scarce, charcoal automatically costs more
shouldComponentsCurrentPricesAffectWholesPrice = true

// the most components' prices may affect a created ware's price
// ex: 0.75 == can lower created's price as much as 75% and
// can raise created's price by 75% of components' prices
linkedPricesPercent = 0.75

// =Transaction Fees:=
// whether or not to charge for buying, selling, or sending
chargeTransactionFees = false

// how much to charge per transaction for buying/etc.
// 0.05 == fee is 5% of total price or $0.05
transactionFeeBuying      = 0.10
transactionFeeSelling     = 0.00
transactionFeeSending     = 0.02
transactionFeeResearching = 0.015

// if true, transactionFee is treated as a multiplier,
// charging based off of purchases' total prices 
// if false, transactionFee is treated as a flat rate
transactionFeeBuyingIsMult      = true
transactionFeeSellingIsMult     = true
transactionFeeSendingIsMult     = true
transactionFeeResearchingIsMult = true

// what to say when telling users a fee for
// purchasing/selling/transferring has been applied
transactionFeeBuyingMsg      = Tax paid: 
transactionFeeSellingMsg     = Income tax paid: 
transactionFeeSendingMsg     = Transfer fee applied: 
transactionFeeResearchingMsg = Brokerage fee applied: 

// if true, money from fees is put into transactionFeeAccount
transactionFeesShouldPutFeesIntoAccount = true

// the account which transaction fees are paid to
// if this account doesn't exist,
// an inaccessible account is made
transactionFeesAccount = cumulativeTransactionFees

// ===Wares' Quantities for Sale:===
// =Supply and Demand:=
// quantity > this is considered saturated
quanExcessive   = 65536, 43008, 14336, 10240, 6144, 3072
// quantity = this is considered balanced
quanEquilibrium = 16384,  9216,  5120,  3072, 2048, 1024
// quantity < this is considered scarce
quanDeficient   =  4096,  2048,  1536,  1024,  768,  512

// true means it is truly a command economy
pricesIgnoreSupplyAndDemand = false

// if true, wares with prices at or below
// the price floor cannot be sold
noGarbageDisposing = false

// =Starting Quantities:=
// starting stock for each level
startQuanBase = 16384, 9216, 5120, 3072, 2048, 1024
// scales starting stock linearly
startQuanMult = 1.0
// pushes starting stock levels closer together or farther apart
startQuanSpread = 1.0

// =Research:=
// Industrial research increases a ware's supply and demand,
// reduces price fluctuations, and
// resets quantity available for sale to equilibrium.

// researching a ware costs increases this much
// per ware hierarchy level (represents rarity)
// set to 0 to disable this feature
researchCostPerHierarchyLevel = 185.0

// if true, the cost of researching a ware is a multiplier
// applied to the market's current price average
researchCostIsAMultOfAvgPrice = true

// =Automatic Market Rebalancing:=
// whether stock levels should bring themselves
// to equilibrium by periodically increasing or decreasing
automaticStockRebalancing = false

// how often quantities for sale should change to rebalance themselves
// 45 == change every 45 minutes
automaticStockRebalancingFrequency = 45

// how much quantities for sale should change per rebalancing event
// 0.005 == 0.5% of equilibrium quantity
automaticStockRebalancingPercent = 0.005

// ===Ware-Handling:===
// contains wares to be tradeable within the marketplace
filenameWares = wares.txt

// save file containing tradeable wares within the marketplace
// if this file exists, it is loaded instead of filenameWares
filenameWaresSave = waresSaved.txt

// if true, checking ware IDs for corresponding items
// existing within Minecraft does not check metadata
// useful for mods which do not register items properly
// bad for validating ware entries since it may
// allow loading wares which don't exist
itemExistenceCheckIgnoresMeta = false

// whether wares which are not in the market
// may be sold using a Forge OreDictionary name
// it shares with a ware in the market
// ex: sell different copper ingots from multiple mods,
// pretending they are all from the mod
// whose copper ingot is in the market
allowWareTagSubstitution = true

// whether to print warnings for not finding
// Forge OreDictionary names used by alternative aliases
wareTagsReportInvalid = false

// max tolerance for how long a crafting chain may go, where a crafted item is crafted using another crafted item, which is crafted using another crafted item, and so forth
// Ex: 5 means allows loading Item6, where Item6 is crafted using Item5, which uses Item4, which uses Item3, which uses Item2, which uses Item1. However, 5 would flag an error for Item7 since Item7's crafting chain would be too long.
maxCraftingDepth = 10

// ===Accounts:===
// how much money an account should start with
accountStartingMoney = 0.0

// how many accounts a single player is allowed to create
// 0 == no new accounts except default, personal ones
// -1 == no restriction or infinity accounts
accountMaxCreatedByIndividual = 3

// contains accounts usable within the marketplace
filenameAccounts = accounts.txt

// =Interest:=
// if true, account funds experience compound interest
accountPeriodicInterestEnabled = false

// interest rate at which account funds are compounded
// 1.5 == 1.5%; accurate to 0.01
accountPeriodicInterestPercent = 1.5

// how often compound interest is applied
// dedicated server recommended: 120 == 2 hours
// singleplayer recommended: 15 == 15 minutes
accountPeriodicInterestFrequency = 120

// if true, interest is only applied when
// account owners are logged onto the server
accountPeriodicInterestOnlyWhenPlaying = false

// ===Administrative:===
// All files except filenameMarket can be saved
// in a world's directory in ../CommandEconomy/
// or the Minecraft game directory
// in ../config/CommandEconomy/.
// The world's directory is checked for files first
// unless crossWorldMarketplace is true.

// If true, ware and account save files
// will be shared across all worlds.
// To exclude a world while set to true,
// go to the world's Command Economy directory
// and create a local config file named "config.txt".
// As long as this config file exists,
// that world will load it
// instead of the main config file.
crossWorldMarketplace = false

// output file for printing wares within the marketplace
// "/printMarket" to print to this file
filenameMarket = market.txt

// disables automatically saving wares and accounts when the world is saved
disableAutoSaving = false

// ===Additional Factors:===
// =AI:=
// whether AI should be used
enableAI = false

// which AI professions should be used
// repeats increase the number of times a profession trades per event
activeAI = armorer, cleric, farmer, farmer, fletcher, librarian

// how often AI should trade, in minutes
aiTradeFrequency = 60

// how many units AI should buy or sell per trade
// in percentage of equilibrium stock
// ex: ware's quanEquilibrium = 100 and aiTradeQuantityPercent = 0.05
// means AI will buy or sell 5 units of the ware at a time
aiTradeQuantityPercent = 0.05

// how randomized AI trade decisions should be
// 0.0 == trade according to wares' supply and demand
// 1.0 == trades are mostly unpredictable
aiRandomness = 0.05

// contains possible AI, the wares they may trade,
// and their preferences
filenameAIProfessions = aiProfessions.json

// if true, AI pay transaction fees just like players do
aiShouldPayTransactionFees = true

// =Random Events:=
// whether or not to periodically trigger events
// summoning or destroying wares' quantities for sale
randomEvents = false

// on average, an event should occur every X minutes
randomEventsFrequency = 180

// events may occur anywhere from
// frequency *  (1 - variance) to frequency * variance
// so if frequency is 180 minutes and variance is 0.25,
// events could occur anywhere from every 135 minutes to 225 minutes
randomEventsVariance = 0.25

// if true, random events display which wares
// have been affected when an event fires
randomEventsPrintChanges = false

// if true, the changes in quantities for sale listed below
// are considered percentages of equilibrium quantity
// if false, they are considered flat values
randomEventsAreChangesPercents = true

// each random event may affect stock levels
// up to the amounts listed below
// 0.15 == 15% of equilibrium or 0 change
// 15 == 1500% or +/-15 stock for hierarchy level 2 (iron),
// flat rates scale according to equilibrium stock for other levels
randomEventsLargeChange  = 0.15
randomEventsMediumChange = 0.10
randomEventsSmallChange  = 0.05

// contains possible events, their descriptions,
// the wares they may affect and how much each ware is affected
filenameRandomEvents = randomEvents.json